/*
 * This file is part of www.nand2tetris.org
 * and the book "The Elements of Computing Systems"
 * by Nisan and Schocken, MIT Press.
 * File name: projects/05/CPU.hdl
 */

/*
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
   
    // Choose multiplexer output as instruction input if A-instruction
    // or choose ALU output as multiplexer output if C-instruction

    Mux16(a=instruction,b=ALUOutMuxA,sel=instruction[15],out=muxAOut);

    // Determine whether to load A-Register
    // Load A-register in case of A-instruction or according to 
    // instruction[5] in case of C-instruction

    Not(in=instruction[15],out=AInstruction);
    Or(a=AInstruction,b=instruction[5],out=loadAReg);

    // Loading the A-Register
    ARegister(in=muxAOut,load=loadAReg,
              out=ARegOut1,out=ARegOut2,out[0..14]=addressM);

    // Determine whether to load second argument of ALU 
    // from A-Register or Memory, in case of a C-instruction

    Mux16(a=ARegOut1,b=inM,sel=instruction[12],out=muxBOut);

    // Determine second argument of ALU based on 
    // A-instruction or C-instruction

    Mux16(a=muxBOut,b=ARegOut1,sel=AInstruction,out=ARegOut);

    // Determine whether to load D-Register according to instruction type
    // In case of A-instruction, don't load D-Register
    // In case of C-instruction, load according to instruction[4]

    Mux(a=instruction[4],b=instruction[15],sel=AInstruction,out=loadD);
    DRegister(in=ALUOutDReg,load=loadD,out=DRegOut);

    ALU(x=DRegOut,y=ARegOut,
        zx=instruction[11],nx=instruction[10],zy=instruction[9],
	ny=instruction[8],f=instruction[7],no=instruction[6],
	out=outM,out=ALUOutMuxA,out=ALUOutDReg,zr=zero,ng=negative);

    // Determine value of writeM according to instruction type
    // In case of A-instruction, don't set writeM
    // In case of C-instruction, set writeM according to instruction[3]

    Mux(a=instruction[3],b=instruction[15],sel=AInstruction,out=writeM);

    // Calculate control bit for positive value

    Not(in=zero,out=notZero);
    Not(in=negative,out=notNegative);
    And(a=notZero,b=notNegative,out=positive);

    And(a=instruction[2],b=negative,out=lessThan);
    And(a=instruction[1],b=zero,out=equal);
    And(a=instruction[0],b=positive,out=greaterThan);

    Or(a=lessThan,b=greaterThan,out=notEqual);
    Or(a=equal,b=notEqual,out=jmp);
    
    // Determine whether to jump depending on instruction type
    // In case of A-instruction, don't jump
    // In case of C-instruction, jump based on controls and conditions

    Mux(a=jmp,b=instruction[15],sel=AInstruction,out=jump);

    PC(in=ARegOut2,out[0..14]=pc,load=jump,inc=true,reset=reset);
}
